/*import org.scalatest._
import game.GridOfAttack

class GridOfAttackSpec extends FunSuite with DiagrammedAssertions {

  /* test on setHit */
  test("the square a5 has been changed into a hit symbol (o)") {
    var g1 = new GridOfAttack("g1", 10)
    g1.setHit("a5")
    assert(Array((".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      ("o", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", ".")).sameElements(g1.representation))
  }
  /* test on setHit */
  test("the square a5 has been changed into a hit symbol (o)") {
    var g1 = new GridOfAttack("g1", 10)
    g1.setSunk("a5")
    assert(Array((".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      ("-", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", ".")).sameElements(g1.representation))
  }
  /* test on setHit */
  test("the square a5 has been changed into a hit symbol (o)") {
    var g1 = new GridOfAttack("g1", 10)
    g1.setMiss("a5")
    assert(Array((".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      ("x", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
      (".", ".", ".", ".", ".", ".", ".", ".", ".", ".")).sameElements(g1.representation))
  }


}*/